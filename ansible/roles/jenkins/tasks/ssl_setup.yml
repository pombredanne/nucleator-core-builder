# Copyright 2015 47Lining LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Copy pkcs12 certificate container to target machine
  sudo: yes
  copy:
    src="{{ssl.src_certificate}}"
    dest="{{ssl.tmp_certificate}}"
    owner=jenkins
    group=jenkins
    mode=0644

- name: Delete existing keystore
  file: path={{ssl.tmp_keystore}} state=absent
  sudo: yes

- name: Delete existing application keystore
  file:
    path="{{ssl.app_keystore}}"
    state=absent
  sudo: yes

- name: Generate x509 for importing
  shell: "openssl pkcs12 -in {{ssl.tmp_certificate}} -clcerts -nokeys -passin pass:{{ssl.pkcs12_password}} | openssl x509 > {{ssl.tmp_pkcs12}}"
  sudo: yes

- name: Check for alias in java cacert keystore
  shell: "keytool -list -storepass {{ssl.java_cacert_keystore_password}} -keystore {{ssl.java_cacert_keystore}} -noprompt"
  sudo: yes
  ignore_errors: true
  register: keytool_list

# Throws an error if the alias is already there, but that's ok
- name: Delete alias from java cacert keystore
  shell: "keytool -delete -alias {{ssl.keystore_cert_alias}} -storepass {{ssl.java_cacert_keystore_password}} -keystore {{ssl.java_cacert_keystore}} -noprompt"
  sudo: yes
  ignore_errors: true
  when: keytool_list.stdout.find('{{ssl.keystore_cert_alias}}') != -1

- name: Update java cacert keystore
  shell: "keytool -importcert -alias {{ssl.keystore_cert_alias}} -file {{ssl.tmp_pkcs12}} -storepass {{ssl.java_cacert_keystore_password}} -keystore {{ssl.java_cacert_keystore}} -noprompt"
  sudo: yes

- name: Creating {{ customer_name ~ '-' ~ cage_name }} keystore
  shell: "keytool -importkeystore -deststorepass {{ ssl.pkcs12_password }} -destkeypass {{ ssl.pkcs12_password }} -destkeystore {{ssl.tmp_keystore}} -srckeystore {{ssl.tmp_certificate}} -srcstoretype PKCS12 -srcstorepass {{ ssl.pkcs12_password }} -alias {{ ssl.keystore_cert_alias }}"
  sudo: yes

- name: Copy generated keystore to application lib
  shell: "cp {{ssl.tmp_keystore}} {{ssl.app_keystore}}"
  sudo: yes

- name: Set permissions on application lib keystore
  file:
   path="{{ssl.app_keystore}}"
   state=file
   owner=jenkins
   group=jenkins
   mode=0700
  sudo: yes
