<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Define a new beanstalk container and create a job which will create and provision the beanstalk in the given Cage.</description>
  <displayName>Create Beanstalk Container for $ApplicationName</displayName>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <jp.ikedam.jenkins.plugins.extensible__choice__parameter.ExtensibleChoiceParameterDefinition plugin="extensible-choice-parameter@1.2.2">
          <name>CustomerCage</name>
          <description>In what cage do you want the container to be created?</description>
          <editable>false</editable>
          <choiceListProvider class="jp.ikedam.jenkins.plugins.extensible_choice_parameter.SystemGroovyChoiceListProvider">
            <scriptText>import groovy.io.FileType
def parent_path = &quot;/var/lib/jenkins/nucleator/siteconfig/ansible/roles/siteconfig&quot;
def list = []
def pattern = ~/([a-zA-Z0-9]+)-([a-zA-Z0-9]+).yml/

def dir = new File(parent_path+&quot;/vars&quot;)
dir.eachFileRecurse (FileType.FILES) { file -&gt;
  def mat = pattern.matcher(file.name)
  if(mat.matches() &amp;&amp; !file.name.startsWith(&quot;{&quot;)) {
      println &quot;CustomerCage: &quot;+mat[0][1]+&quot;:&quot;+mat[0][2]
    list &lt;&lt; mat[0][1]+&quot;:&quot;+mat[0][2]
  }
}
return list</scriptText>
            <usePredefinedVariables>false</usePredefinedVariables>
          </choiceListProvider>
        </jp.ikedam.jenkins.plugins.extensible__choice__parameter.ExtensibleChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ContainerName</name>
          <description>The name of the new container</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>Tier</name>
          <description>AWS Tier of beanstalk to provision</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>webserver</string>
              <string>worker</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <jp.ikedam.jenkins.plugins.extensible__choice__parameter.ExtensibleChoiceParameterDefinition plugin="extensible-choice-parameter@1.2.2">
          <name>EC2_InstanceType</name>
          <description>EC2 Instance Type to Provision</description>
          <editable>false</editable>
          <choiceListProvider class="jp.ikedam.jenkins.plugins.extensible_choice_parameter.SystemGroovyChoiceListProvider">
            <scriptText>import groovy.io.FileType
def parent_path = &quot;/var/lib/jenkins/nucleator/scripts&quot;
def list = [&quot;- default -&quot;]
new File(parent_path, &apos;supported_ec2_instance_types.txt&apos;).eachLine { line -&gt;
    list.add(line)
}
return list</scriptText>
            <usePredefinedVariables>false</usePredefinedVariables>
          </choiceListProvider>
        </jp.ikedam.jenkins.plugins.extensible__choice__parameter.ExtensibleChoiceParameterDefinition>
        <jp.ikedam.jenkins.plugins.extensible__choice__parameter.ExtensibleChoiceParameterDefinition plugin="extensible-choice-parameter@1.2.2">
          <name>DatabaseInstanceType</name>
          <description>Database instance type to provision</description>
          <editable>false</editable>
          <choiceListProvider class="jp.ikedam.jenkins.plugins.extensible_choice_parameter.SystemGroovyChoiceListProvider">
            <scriptText>import groovy.io.FileType
def parent_path = &quot;/var/lib/jenkins/nucleator/scripts&quot;
def list = [&quot;- None -&quot;]
new File(parent_path, &apos;supported_rds_instance_types.txt&apos;).eachLine { line -&gt;
    list.add(line)
}
return list</scriptText>
            <usePredefinedVariables>false</usePredefinedVariables>
          </choiceListProvider>
        </jp.ikedam.jenkins.plugins.extensible__choice__parameter.ExtensibleChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DatabaseName</name>
          <description>Database Name</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DatabaseUser</name>
          <description>Database User</description>
          <defaultValue>admin</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.PasswordParameterDefinition>
          <name>DatabasePassword</name>
          <description>Password for the database user</description>
          <defaultValue>+piyC/Gkdso+O2/iqofNzA==</defaultValue>
        </hudson.model.PasswordParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MinScale</name>
          <description>Minimum size of autoscaling group (default 1)</description>
          <defaultValue>1</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MaxScale</name>
          <description>Maximum size of autoscaling group (default 4)</description>
          <defaultValue>4</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ServiceRole</name>
          <description>Role to associate with instance profile (Change this if this instance will have special requirements and you have created another role for it.)</description>
          <defaultValue>NucleatorBeanstalkServiceRunner</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>QueueUrl</name>
          <description>The URL of a queue you want a worker tier beanstalk to use instead of creating one itself.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>echo Provisioning &quot;$ApplicationFlavor&quot; beanstalk &quot;$$ContainerName&quot; in &quot;$$CustomerCage&quot;
CUST=&quot;$$(echo &quot;$$CustomerCage&quot; | cut -d &apos;:&apos; -f 1)&quot;
CAGE=&quot;$$(echo &quot;$$CustomerCage&quot; | cut -d &apos;:&apos; -f 2)&quot;
TierArg=&quot;&quot;
EITArg=&quot;&quot;
DBTArg=&quot;&quot;
DBNArg=&quot;&quot;
DBUArg=&quot;&quot;
DBPArg=&quot;&quot;
MNSArg=&quot;&quot;
MXSArg=&quot;&quot;
SVRArg=&quot;&quot;
QURArg=&quot;&quot;
if [[ -n &quot;$$Tier&quot; ]]; then
  TierArg=&quot;--tier $$Tier&quot;
fi
if [[ -n &quot;$$EC2_InstanceType&quot; &amp;&amp; &quot;$$EC2_InstanceType&quot; != &quot;- default -&quot; ]]; then
  EITArg=&quot;--beanstalk_instance_type &apos;$$EC2_InstanceType&apos;&quot;
fi
if [[ -n &quot;$$DatabaseInstanceType&quot; &amp;&amp; &quot;$$DatabaseInstanceType&quot; != &quot;- None -&quot; ]]; then
  DBTArg=&quot;--database_instance_type &apos;$$DatabaseInstanceType&apos;&quot;
  if [[ -n &quot;$$DatabaseName&quot; ]]; then
    DBNArg=&quot;--database_name &apos;$$DatabaseName&apos;&quot;
  fi
  if [[ -n &quot;$$DatabaseUser&quot; ]]; then
    DBUArg=&quot;--database_user &apos;$$DatabaseUser&apos;&quot;
  fi
  if [[ -n &quot;$$DatabasePassword&quot; ]]; then
    DBPArg=&quot;--database_password &apos;$$DatabasePassword&apos;&quot;
  fi
fi
if [[ -n &quot;$$MinScale&quot; ]]; then
  MNSArg=&quot;--minscale $$MinScale&quot;
fi
if [[ -n &quot;$$MaxScale&quot; ]]; then
  MXSArg=&quot;--maxscale $$MaxScale&quot;
fi
if [[ -n &quot;$$ServiceRole&quot; ]]; then
  SVRArg=&quot;--service_role $$ServiceRole&quot;
fi
if [[ -n &quot;$$QueueUrl&quot; ]]; then
  QURArg=&quot;--queue_url $$QueueUrl&quot;
fi
ssh -F ~/.ssh/config ec2-user@nucleator &lt;&lt; ENDSSH
PYTHONUNBUFFERED=1 nucleator beanstalk provision --customer &quot;$$CUST&quot; --cage &quot;$$CAGE&quot; --type &quot;$ApplicationFlavor&quot; --app_name &quot;$$ContainerName&quot; $$TierArg $$EITArg $$DBTArg $$DBNArg $$DBUArg $$DBPArg $$MNSArg $$MXSArg $$SVRArg $$QURArg &amp;&amp; nucleator beanstalk configure --customer &quot;$$CUST&quot; --cage &quot;$$CAGE&quot; --app_name &quot;$$ContainerName&quot;
ENDSSH</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.4.1">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
  </buildWrappers>
</project>